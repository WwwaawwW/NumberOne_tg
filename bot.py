import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from openai import OpenAI
from datetime import datetime, timedelta

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
client = OpenAI(api_key=OPENAI_API_KEY)

main_menu = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üß† –ù–∞—à–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ)")],
    [KeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –ò–ò (–ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ)")],
    [KeyboardButton(text="üí´ –ü—Ä–µ–º–∏—É–º"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
])

user_model = {}
user_gpt4_usage = {}
user_last_reset = {}
GPT4_DAILY_LIMIT = 5

premium_tariffs = {
    "text_ai": {
        "title": "üìù –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ò–ò",
        "desc": "–î–æ—Å—Ç—É–ø –∫ GPT-4, GPT-4 Omni –∏ –±—É–¥—É—â–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ò–ò.",
        "month": 349,
        "year": 2490
    },
    "image_ai": {
        "title": "üñº –ò–ò –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "desc": "DALL¬∑E, Midjourney, Stable Diffusion (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).",
        "month": 299,
        "year": 1990
    },
    "full_access": {
        "title": "üöÄ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø",
        "desc": "–í–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: —Ç–µ–∫—Å—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
        "month": 499,
        "year": 3690
    }
}

model_descriptions = {
    "gpt-3.5-turbo": "üß† GPT-3.5 ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å.",
    "gpt-4": "üöÄ GPT-4 ‚Äî –ø—Ä–µ–º–∏—É–º-–º–æ–¥–µ–ª—å —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.",
    "gpt-4o": "ü§ñ GPT-4 Omni ‚Äî —Å–∞–º—ã–π –º–æ—â–Ω—ã–π –ò–ò –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
    "dalle": "üé® DALL¬∑E 3 ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É.",
    "midjourney": "üñå Midjourney ‚Äî —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–ò.",
    "stablediff": "üß† Stable Diffusion ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
}

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_model[user_id] = "gpt-3.5-turbo"
    user_gpt4_usage[user_id] = 0
    user_last_reset[user_id] = datetime.now()
    await message.answer(
    await message.answer(
        """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NUMBER ONE ‚Äî –º–∏—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π!

üìå GPT-3.5 ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ
üöÄ GPT-4, DALL¬∑E –∏ –ø—Ä–æ—á–µ–µ ‚Äî –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –ø–æ–¥ –ø–æ–¥–ø–∏—Å–∫—É."""
    )
        "üöÄ GPT-4, DALL¬∑E –∏ –ø—Ä–æ—á–µ–µ ‚Äî –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –ø–æ–¥ –ø–æ–¥–ø–∏—Å–∫—É.",
        reply_markup=main_menu
    )

@dp.message(F.text == "üß† –ù–∞—à–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ)")
async def show_models(message: types.Message):
    text = "üß† <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:</b>

"
    for desc in model_descriptions.values():
        text += f"{desc}

"
    await message.answer(text.strip(), parse_mode="HTML")

@dp.message(F.text == "üí´ –ü—Ä–µ–º–∏—É–º")
async def premium_info(message: types.Message):
    text = "üíé <b>–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏</b>

"
    for key, data in premium_tariffs.items():
        text += f"{data['title']}
{data['desc']}
1 –º–µ—Å: {data['month']}‚ÇΩ | 1 –≥–æ–¥: {data['year']}‚ÇΩ

"
    await message.answer(text.strip(), parse_mode="HTML")

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_info(message: types.Message):
    user_id = message.from_user.id
    model = user_model.get(user_id, "gpt-3.5-turbo")
    await message.answer(f"üë§ –í–∞—à ID: {user_id}
üß† –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {model}")

@dp.message(F.text == "ü§ñ –í—ã–±—Ä–∞—Ç—å –ò–ò (–ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ)")
async def choose_model(message: types.Message):
    user_id = message.from_user.id
    current = user_model.get(user_id, "gpt-3.5-turbo")
    def label(name, code):
        return f"{name} ‚úÖ" if code == current else name
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=label("GPT-3.5", "gpt-3.5-turbo"), callback_data="select_gpt-3.5-turbo")],
        [InlineKeyboardButton(text=label("GPT-4", "gpt-4"), callback_data="select_gpt-4")],
        [InlineKeyboardButton(text=label("GPT-4 Omni", "gpt-4o"), callback_data="select_gpt-4o")],
        [InlineKeyboardButton(text=label("DALL¬∑E 3", "dalle"), callback_data="select_dalle")],
        [InlineKeyboardButton(text=label("Midjourney", "midjourney"), callback_data="select_midjourney")],
        [InlineKeyboardButton(text=label("Stable Diffusion", "stablediff"), callback_data="select_stablediff")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ò–ò:", reply_markup=kb)

@dp.callback_query(F.data.startswith("select_"))
async def model_selected(callback: types.CallbackQuery):
    model = callback.data.replace("select_", "")
    user_model[callback.from_user.id] = model
    await callback.message.answer(f"‚úÖ –ú–æ–¥–µ–ª—å {model} –≤—ã–±—Ä–∞–Ω–∞.")
    await callback.answer()

@dp.message()
async def chat_handler(message: types.Message):
    user_id = message.from_user.id
    model = user_model.get(user_id, "gpt-3.5-turbo")

    if model in ["gpt-4", "gpt-4o"]:
        await message.answer("üö´ –ü–æ–¥–ø–∏—Å–∫–∞ GPT-4 –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    if model in ["dalle", "midjourney", "stablediff"]:
        await message.answer("üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.")
        return

    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π Telegram-–±–æ—Ç."},
                {"role": "user", "content": message.text}
            ]
        )
        await message.answer(response.choices[0].message.content)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
